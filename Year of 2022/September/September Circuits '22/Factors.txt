//20 points

/*
    Competition: HackerEarth
    Problem: Count All Factors
    Author: Ron Prasad
    Date: 09/19/2022
*/
 
#include <iostream>
#include <array>
#include <vector>
#include <cmath>
 
template <typename DataType>
std::vector <DataType> inline Factors (DataType n);
 
//Driver Function:
auto main (int argc, const char** argv) -> decltype (0)
{
    std::ios::sync_with_stdio (NULL);
    std::cin.tie (nullptr);
 
	int64_t n, q, k;
	std::cin >> n;
	
    int64_t ArrayA[n];
    for (int64_t i = 0; i < n; ++i)
    {
        std::cin >> ArrayA[i];
    }
	
	std::cin >> q;
	while (q--)
	{
	    std::cin >> k;
 
	    std::vector <int64_t> VectorOfFactors = Factors(k);
	    
	    // for (auto i : VectorOfFactors)
	    // {
	    //     std::cout << i << " ";
	    // }
	    
	    int64_t Sum = 0;
	    while (!VectorOfFactors.empty())
	    {
	        int64_t Factor = VectorOfFactors.back();
	    
            for (int64_t i = 0; i < n; ++i)
            {
                if (Factor % ArrayA[i] == 0)
                {
                    Sum += 1;
                }
            }
            
    	   VectorOfFactors.pop_back();
	    } 
    
        std::cout << Sum << '\n';
	    
	    //Clear Vector:
	    VectorOfFactors.clear();
	}
	
	return 0;
}
 
template <typename DataType>
std::vector <DataType> inline Factors (DataType n)
{
    std::vector <int64_t> Result;
    
    int64_t Limit = std::sqrt(n);
    for (int64_t i = 1; i <= Limit; ++i)
    {
        if (n % i == 0)
        {
            Result.push_back(i);
            
            if ((n / i) != i)
            {
                Result.push_back(n / i);
            }
        }
    }
    
    return Result;
}