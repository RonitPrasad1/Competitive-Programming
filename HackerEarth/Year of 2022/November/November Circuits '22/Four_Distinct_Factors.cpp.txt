//30 points

/*
    Competition: HackerEarth
    Problem: Four Distinct Factors
    Author: Ron Prasad
    Date: 11-18-2022 
*/

// Header Files:
#include <iostream>
#include <vector>
#include <cassert>

constexpr static int64_t MAX = 1e6;
bool FDF[MAX + 1];

inline auto FourDistinctFactors() -> void;

// Driver Function:
auto main (int argc, const char** argv) -> decltype (0)
{
    // FAST IO:
    std::ios::sync_with_stdio (NULL);
    std::cin.tie (nullptr);

    int64_t t, L, R;
    std::cin >> t;
    
    assert (t >= 1 && t <= 1e5);
    
    while (t--)
    {
        std::cin >> L >> R;
        
        assert (L >= 1 && L <= 1e6);
        assert (R >= 1 && R <= 1e6);
        
        // Function call:
        FourDistinctFactors();
        
        int64_t Counter = 0;
        for (int64_t i = L; i <= R; ++i)
        {
            if (FDF[i] == true)
            {
                ++Counter;
                
                //std::cout << i << " ";
                //std::cout << "Debugger: YES!" << '\n';
            }
        }
        
        std::cout << Counter << '\n';
    }

    return 0;
}

inline auto FourDistinctFactors() -> void
{
    std::vector <int64_t> StoredPrimes;
    bool visitedPrimes[MAX + 1];
    
    // Visited Primes:
    for (int64_t i = 0; i < (MAX + 1); ++i)
    {
        visitedPrimes[i] = true; //[1, 1, 1, 1, 1, ..., 1]
    }
    
    for (int64_t Primes = 2; (Primes * Primes <= MAX); ++Primes)
    {
        if (visitedPrimes[Primes] == true)
        {
            for (int64_t i = (Primes * 2); i <= MAX; (i += Primes))
            {
                visitedPrimes[i] = false;
            }
        }
    }
    
    for (int64_t Primes = 2; Primes <= MAX; ++Primes)
    {
        if (visitedPrimes[Primes])
        {
            StoredPrimes.push_back(Primes);
        }
    }
    
    // FDF:
    for (int64_t i = 0; i < (MAX + 1); ++i)
    {
        FDF[i] = false; //[0, 0, 0, 0, 0, ..., 0]
    }
    
    for (int64_t i = 0; i < (StoredPrimes.size()); ++i)
    {
        int64_t RunningMove = StoredPrimes[i];
        
        if (RunningMove * RunningMove * RunningMove <= MAX)
        {
            FDF[RunningMove * RunningMove * RunningMove] = true;
        }
        
        for (int64_t j = (i + 1); j < (StoredPrimes.size()); ++j)
        {
            int64_t MarkedMove = StoredPrimes[j];
            
            if(RunningMove * MarkedMove > MAX)
                break;
                
            FDF[RunningMove * MarkedMove] = true;
        }
    }
}