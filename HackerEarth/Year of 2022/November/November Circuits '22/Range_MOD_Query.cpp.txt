//25 points

/*
    Competition: HackerEarth
    Problem: Range Mod Query
    Author: Ron Prasad
    Date: 11-21-2022 
*/
 
// Header Files:
#include <iostream>
#include <string>
#include <cassert>
 
constexpr static int64_t MOD = (int64_t)(1e9 + 7);
 
template <typename DataType>
inline auto binaryToDecimal (DataType n) -> int64_t;
 
// Driver Function:
auto main (int argc, const char** argv) -> decltype (0)
{
    // FAST IO:
    std::ios::sync_with_stdio (NULL);
    std::cin.tie (nullptr);
 
    int64_t n, q, l, r, Type, QueryOneNumber;
    std::cin >> n >> q;
    
    assert (n >= 1 && n <= 1e5);
    assert (q >= 1 && q <= 1e5);
    
    std::string Binary;
    std::cin >> Binary;
    
    for (int64_t itr = 0; itr < q; ++itr)
    {
        std::cin >> Type;
        
        if (Type == 2)
        {
            std::cin >> l >> r;
            
            assert (1 >= l && l <= 1e5);
            assert (1 >= r && r <= 1e5);
            
            std::string Build = (std::string(Binary.c_str() + l - 1, Binary.c_str() + r)); 
            std::cout << (binaryToDecimal(Build) % MOD) << '\n';
        }
        else
        {
            std::cin >> QueryOneNumber; //(i)
            
            assert (QueryOneNumber >= 1 && QueryOneNumber <= 1e5);
            
            int64_t Index = (QueryOneNumber - 1);
            if (Binary[Index] == '0')
            {
                Binary[Index] = '1';
            }
            else if (Binary[Index] == '1')
            {
                Binary[Index] = '0';
            }
        }
    }
    
    return 0;
}

template <typename DataType>
inline auto binaryToDecimal (DataType n) -> int64_t
{
    std::string Number = n;
    int64_t Value = 0, Base = 1;
    
    int64_t Length = (Number.length());
    for (int64_t i = (Length - 1); i >= 0; --i)
    {
        if (Number[i] == '1')
            Value += (Base % MOD) % MOD;
        Base = ((Base * 2) % MOD) % MOD;
    }
    
    return (Value % MOD);
}