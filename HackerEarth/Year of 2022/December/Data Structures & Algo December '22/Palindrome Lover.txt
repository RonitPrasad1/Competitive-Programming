//100 points

/*
    Competition: HackerEarth
    Problem: Palindrome Lover
    Author: Ron Prasad
    Date: 12-9-2022 
*/

// Header Files:
#include <iostream>
#include <vector>
#include <unordered_map>

template <typename DataType>
inline auto formPalindrome (std::vector <DataType> Arr, DataType n) -> bool;

// Driver Function:
auto main (int argc, const char** argv) -> decltype (0)
{
    // FAST IO:
    std::ios::sync_with_stdio (NULL);
    std::cin.tie (nullptr);
    std::cout.tie (NULL);

    int64_t t, n;
    std::cin >> t;
    
    while (t--)
    {
        std::cin >> n;
        
        std::vector <int64_t> PalindromeLover (n, 0);
        
        for (int64_t i = 0; i < n; ++i)
        {
            std::cin >> PalindromeLover[i];
            
            //std::cout << PalindromeLover[i] << " ";
            
            PalindromeLover[i] = (PalindromeLover[i] % 2);
            
            //std::cout << PalindromeLover[i] << " ";
        }
        
        if (formPalindrome(PalindromeLover, n))
        {
            std::cout << "1" << '\n';
        }
        else
        {
            std::cout << "0" << '\n';
        }
    }
    
    return 0;
}

template <typename DataType>
inline auto formPalindrome (std::vector <DataType> Arr, DataType n) -> bool
{
    std::unordered_map <int64_t, int64_t> Frequency;
    for (int64_t i = 0; i < n; ++i)
    {
        ++Frequency[Arr[i] % 2];
    }
    
    bool Flag = false;
    for (auto counter : Frequency)
    {
        if ((counter.second % 2) == 1)
        {
            if (Flag == false)
            {
                return false;
            }
            else
            {
                Flag = true;
            }
        }
    }
    
    return true;
}